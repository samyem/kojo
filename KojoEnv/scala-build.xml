<?xml version="1.0" encoding="UTF-8"?>
<project name="scala-module" default="netbeans" basedir=".">
    <property name="harness.dir" value="nbplatform.${nbplatform.active}.harness.dir"/>
    <import file="${harness.dir}/build.xml"/>

    <property environment="env"/>
    <condition property="scala.home" value="${env.SCALA_HOME}">
        <isset property="env.SCALA_HOME"/>
    </condition>
    <fail unless="scala.home">
        You must set SCALA_HOME or environment property and append "-J-Dscala.home=scalahomepath"
        property to the end of "netbeans_default_options" in NetBeansInstallationPath/etc/netbeans.conf to point to
        Scala installation directory.
    </fail>
    <property name="scala.compiler" value="${scala.home}/lib/scala-compiler.jar"/>
    <property name="scala.library" value="${scala.home}/lib/scala-library.jar"/>
    <property name="scala.lib" value="${scala.home}/lib"/>

    <path id="scala.libs">
        <pathelement location="${scala.library}"/>
        <pathelement location="${scala.compiler}"/>
    </path>

    <!-- scalac will check class dependencies deeply, so we can not rely on public package only which is refed by ${module.classpath} -->
    <path id="scalac.cp">
        <path refid="scala.libs"/>
        <pathelement path="${module.run.classpath}"/>
        <pathelement path="${cp.extra}"/>
        <pathelement path="${build.classes.dir}"/>
    </path>

    <target name="scala-taskdef" depends="init">
        <echo message="Compiling scala sources via ${scala.library}, ${scala.compiler}"/>
        <path id="scala.libs">
            <pathelement location="${scala.library}"/>
            <pathelement location="${scala.compiler}"/>
        </path>
        <taskdef resource="scala/tools/ant/antlib.xml">
            <classpath>
                <path refid="scala.libs"/>
            </classpath>
        </taskdef>
    </target>

    <property name="jar-excludes" value="**/*.java,**/*.form,**/package.html,**/doc-files/,**/*.scala"/>

    <target name="-do-scalac">
        <condition property="condition-scala-fsc">
            <isset property="scala.fsc"/>
        </condition>
        <antcall target="-do-fast-scalac"/>  <!--then-->
        <antcall target="-do-norm-scalac"/>  <!--else-->
    </target>

    <target name="-do-fast-scalac" if="condition-scala-fsc">
        <echo message="*************************************Doing fast scalac"/>
        <!-- we set force=true to recompile eveything, because of the nb-javac issue (see below) -->
        <fsc classpathref="scalac.cp" srcdir="${src.dir}" destdir="${build.classes.dir}"
             encoding="UTF-8" target="jvm-${javac.target}" unchecked="${scalac.unchecked}"
             deprecation="${scalac.deprecation}" force="true" />
    </target>

    <target name="-do-norm-scalac" unless="condition-scala-fsc">
        <echo message="*************************************Doing normal scalac"/>
        <scalac classpathref="scalac.cp" srcdir="${src.dir}" destdir="${build.classes.dir}"
                encoding="UTF-8" target="jvm-${javac.target}" unchecked="${scalac.unchecked}"
                deprecation="${scalac.deprecation}" force="true" fork="true"/>
    </target>

    <target name="scala-compile" depends="scala-taskdef" unless="is.jar.uptodate">

        <!-- javac's classpath should include scala.library and all these paths of "cp" -->
        <!-- if I try to put this at the top level, javac fails with missing classes/packages -->
        <path id="javac.cp">
            <path refid="scala.libs"/>
            <pathelement path="${module.classpath}"/>
            <pathelement path="${cp.extra}"/>
        </path>

        <mkdir dir="${build.classes.dir}"/>

        <depend srcdir="${src.dir}" destdir="${build.classes.dir}" cache="${build.dir}/depcache">
            <classpath refid="javac.cp"/>
        </depend>

        <!-- scalac -->
        <antcall target="-do-scalac"/>

        <!-- nb-javac clobbers the scala classes because it thinks one of the classes is stale! -->
        <nb-javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="${build.compiler.debug}" debuglevel="${build.compiler.debuglevel}" encoding="UTF-8"
                deprecation="${build.compiler.deprecation}" optimize="${build.compiler.optimize}" source="${javac.source}" target="${javac.target}" includeantruntime="false">
            <classpath refid="javac.cp"/>
            <compilerarg line="${javac.compilerargs}"/>
            <processorpath refid="processor.cp"/>
        </nb-javac>

        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}" excludes="${jar-excludes}"/>
        </copy>
    </target>


    <target name="test-up-to-date">
        <!-- This does not work because the netbeans test build seems to zap the test classes, and then no tests get run
        <uptodate targetfile="${test.unit.out.folder}/tests.jar" property="is.test.jar.uptodate">
            <srcfiles dir="${test.unit.src.dir}"/>
        </uptodate>
        -->
    </target>

    <!-- A hack to get tests to compile, without making the KojoEnv module dependent on the
                 test modules (which makes the test jars get bundled in the distribution).
    -->
    <path id="kojo.test.jars">
        <fileset dir="../JMock 2.5.1/release/modules/ext">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="../ScalaCheck/release/modules/ext">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement location="../JUnit4/junit-4.8.2.jar"/>
    </path>

    <property name="kojo.test.jars" refid="kojo.test.jars"/>
    <property name="test.unit.run.cp.extra" value="${kojo.test.jars}"/>

    <target name="do-test-build" depends="test-init">

        <path id="test.unit.custom.cp">
            <path refid="test.unit.cp"/>
            <path refid="kojo.test.jars"/>
        </path>
        
        <mkdir dir="${build.test.unit.classes.dir}"/>
        
        <scalac srcdir="${test.unit.src.dir}" destdir="${build.test.unit.classes.dir}" excludes="${test.excludes}"
                encoding="UTF-8" fork="true">
            <classpath refid="test.unit.custom.cp"/>
        </scalac>
    </target>

</project>
